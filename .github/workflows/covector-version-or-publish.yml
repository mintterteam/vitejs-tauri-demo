name: version or publish

on:
  push:
    branches:
      - main

jobs:
  version-or-release:
    runs-on: ubuntu-latest
    outputs:
      packagesPublished: ${{ steps.covector.outputs.packagesPublished }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: git config
        run: |
          git config --global user.name "${{ github.event.pusher.name }}"
          git config --global user.email "${{ github.event.pusher.email }}"

      - name: covector version or publish
        uses: jbolda/covector/packages/action@release
        id: covector
        with:
          command: "version-or-publish"
      
      - name: Debug
        run: |
          echo "status: ${{ steps.covector.outputs.status }}"
          echo "willPublish: ${{ steps.covector.outputs.willPublish }}"
          echo "commandRan: ${{ steps.covector.outputs.commandRan }}"
          echo "successfulPublish: ${{ steps.covector.outputs.successfulPublish }}"
          echo "packagesPublished: ${{ steps.covector.outputs.packagesPublished }}"
          echo "published app: ${{ steps.covector.outputs.published--demo-app }}"
          echo "will publish app: ${{ steps.covector.outputs.willPublish--demo-app }}"
          echo "version app: ${{ steps.covector.outputs.version--demo-app }}"
      
      - name: Create Pull Request With Versions Bumped
        uses: peter-evans/create-pull-request@v3
        id: cpr
        if: steps.covector.outputs.commandRan == 'version'
        with:
          title: Apply Version Updates From Current Changes
          commit-message: "apply version updates"
          labels: "version updates"
          branch: "release"
          body: ${{ steps.covector.outputs.change }}

  publish-tauri:
    needs: version-or-release
    if: contains(needs.version-or-release.outputs.packagesPublished, '@demo/app')
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest]
        # platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v2
    
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 14
    
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
    
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    
    - name: install webkit2gtk (ubuntu only)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y webkit2gtk-4.0
    
    - name: install app dependencies
      run: yarn

    - uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        projectPath: ./packages/app
        tagName: demo-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
        releaseName: "demo v__VERSION__"
        releaseBody: "See the assets to download this version and install."
        releaseDraft: true
        prerelease: false